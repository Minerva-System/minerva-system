version: "3"

services:
  # REST service
  rest:
    image: luksamuk/minerva_rest:0.3.2
    environment:
      - USER_SERVICE_SERVER=user
      - SESSION_SERVICE_SERVER=session
      - LOG_CONFIG_FILE=/cfg/logging.yml
      - ROCKET_PROFILE=production
      - ROCKET_LOG_LEVEL=normal
      - API_ROOT=/api
      - ROCKET_CLI_COLORS=false
      - ROCKET_ADDRESS=0.0.0.0
    ports:
      - 9000:9000
    depends_on:
      - "user"
    networks:
      - minerva_system
    deploy:
      mode: replicated
      replicas: 2
      labels: [APP = REST_SERVICE]
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
    volumes:
      - /cfg:/cfg/
  
  # RUNONCE service
  runonce:
    image: luksamuk/minerva_runonce:0.3.0
    environment:
      - DATABASE_SERVICE_SERVER=postgresql
      - MONGO_SERVICE_SERVER=mongodb
      - RABBITMQ_SERVICE_SERVER=rabbitmq
    depends_on:
      - "postgresql"
      - "mongodb"
      - "rabbitmq"
    networks:
      - minerva_system
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP = RUNONCE_SERVICE]
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
  
  # USER service
  user:
    image: luksamuk/minerva_user:0.3.1
    environment:
      - DATABASE_SERVICE_SERVER=postgresql
      - RABBITMQ_SERVICE_SERVER=rabbitmq
      - LOG_CONFIG_FILE=/cfg/logging.yml
    networks:
      - minerva_system
    deploy:
      mode: replicated
      replicas: 2
      labels: [APP = USER_SERVICE]
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
    volumes:
      - /cfg:/cfg

  # SESSION service
  session:
    image: luksamuk/minerva_session:0.1.3
    environment:
      - DATABASE_SERVICE_SERVER=postgresql
      - MONGO_SERVICE_SERVER=mongodb
      - REDIS_SERVICE_SERVER=redis
      - RABBITMQ_SERVICE_SERVER=rabbitmq
      - LOG_CONFIG_FILE=/cfg/logging.yml
    networks:
      - minerva_system
    deploy:
      mode: replicated
      replicas: 2
      labels: [APP = SESSION_SERVICE]
      restart_policy:
        condition: on-failure
    volumes:
      - /cfg:/cfg

  # DISPATCH service
  dispatch:
    image: luksamuk/minerva_dispatch:0.1.1
    environment:
      - DATABASE_SERVICE_SERVER=postgresql
      - MONGO_SERVICE_SERVER=mongodb
      - REDIS_SERVICE_SERVER=redis
      - RABBITMQ_SERVICE_SERVER=rabbitmq
      - SESSION_SERVICE_SERVER=session
      - SESSION_SERVICE_PORT=9011
      - LOG_CONFIG_FILE=/cfg/logging.yml
    depends_on:
      - "rabbitmq"
    networks:
      - minerva_system
    deploy:
      mode: replicated
      replicas: 3
      labels: [APP = DISPATCH_SERVICE]
      restart_policy:
        condition: on-failure
    volumes:
      - /cfg:/cfg

  # PostgreSQL
  postgresql:
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - minerva_system
    deploy:
      placement:
        constraints: [node.role == manager]

  # MongoDB
  mongodb:
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    image: mongo:4
    volumes:
      - mongodb-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - minerva_system
    deploy:
      placement:
        constraints: [node.role == manager]

  # Visualizer
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8585:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

  # Redis
  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - minerva_system
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=minerva
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - minerva_system
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
        
        
networks:
  minerva_system:

volumes:
  db-data:
  mongodb-data:
  redis-data:

