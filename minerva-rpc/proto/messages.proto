syntax = "proto3";

// This Protocol Buffer describes the messages that can be used on all services.

package Messages;

// A message containing the index of an expected entity.
message EntityIndex {
  // Index of entity to be retrieved.
  int32 index = 1;
}

// A message containing the index of a page for a list of entities.
message PageIndex {
  // Index of the entity page to be returned. When not informed, should
  // default to 0.
  optional int64 index = 1;
}

// A message describing a user that can be sent back and forth.
// This message represents users for inclusion, updating and retrieval.
message User {
  // ID of the user. Can be ignored when attempting to create or update an
  // user. Otherwise must be present (for example, when representing data
  // retrieved from the database).
  optional int32 id = 1;
  // Login that uniquely identifie this user.
  string login = 2;
  // Name of this user.
  string name = 3;
  // Email for this user. If present, must be unique on the database.
  optional string email = 4;
  // Plain-text password for this user. Must be present when creating a new
  // user; when updating, omitting this field will leave the user's password
  // on the database as it is. If representing data returned from the database,
  // will ALWAYS be omitted.
  optional string password = 5;
}

// A message containing a list of users of any size.
message UserList {
  // Actual list of users retrieved.
  repeated User users = 1;
}

// A message describing a product that can be sent back and forth.
// This message represents products for inclusion, updating and retrieval.
message Product {
  // ID of the product. Can be ignored when attempting to create or update an
  // product. Otherwise must be present (for example, when representing data
  // retrieved from the database).
  optional int32 id = 1;
  // Description for the product.
  string description = 2;
  // Default unit for the product. Must be a two-character string.
  // For example, `UN` for units, `KG` for kilograms, etc.
  string unit = 3;
  // Unit price for this product, with respect to the product's informed
  // unit. This field is a string because it expects a fixed-precision
  // decimal number in string format that can be parsed later.
  string price = 4;
}

// A message containing a list of products.
message ProductList {
  // Actual list of products retrieved.
  repeated Product products = 1;
}

// A message containing data to require a session creation on the backend.
message SessionCreationData {
  // Tenant where the session data should be created.
  string tenant = 1;
  // Login of the user of this tenant that is attempting to create a session.
  string login = 2;
  // Plain-text password of the referred user.
  string password = 3;
}

// A message containing session data retrieved from the backend.
message SessionData {
  // Tenant where the session data exists.
  string tenant = 1;
  // Login of the session's user.
  string login = 2;
  // Creation date of the session. Must be informed in Unix Epoch Timestamp
  // format (non-leap-milliseconds since January 1st, 1970 UTC).
  int64 creation_date = 3;
}

// A message for returning a session token for the user.
message SessionToken {
  // Actual session token data, in Base64 format.
  string token = 1;
}
